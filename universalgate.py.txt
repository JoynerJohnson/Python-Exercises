#! /usr/bin/python

class Gate(object):
  """ Rrepresenting the gate class. """

  def __init__(self,a,b):
    """initialise the class """
    self.input[0]  =  a
    self.input[1]  =  b
    self.output =  None

  def logic(self):
    """ Function of the gate"""
    raise  NotImplementedError

  def output(self):
    """ Output of the gate """
    self.logic ( )
    return self.output

a = int ( input (" Enter the first input : " ) )
b = int ( input(" Enter the second input : " ) )

class AndGate(Gate):
  """ class representing AND gate """

  def logic(self):
    self.output = self.input[0] and self.input[1]
    return self.output


class OrGate(Gate):
  """ class representing OR gate """
    
  def logic(self):
    self.output = self.input[0] or self.input[1]
    return self.output


class NotGate(Gate):
  """ class representing NOT gate """

  def logic(self):
    self.output = not self.input[0]
    return self.output

""" Universal Logic Gates """

n = input("Enter your choice: \n 1.NAND \n 2.NOR")
if n == 1:


  class NandGate (AndGate , NotGate) :

    def logic(self):
      andGate = AndGate(self.input[0])
      andGate.logic ( )
      notGate = NotGate( andGate.output)
      notGate.logic ( )
      self.output = notGate.output
      print (self.output)


else:

  class NorGate (OrGate , NotGate) :
    def logic(self):
      orGate = OrGate(self.input[0])
      orGate.logic ( )
      notGate = NotGate( orGate.output)
      notGate.logic ( )
      self.output = notGate.output
      print (self.output)

